const std = @import("std");
const io = std.io;
const base64 = std.base64;
const asn1 = @import("asn1.zig");
const cert = @import("cert.zig");
const BoundedArray = std.BoundedArray;
const ArrayList = std.ArrayList;

const expect = std.testing.expect;

/// RFC5958 Section 2.  Asymmetric Key Package CMS Content Type
///
/// OneAsymmetricKey ::= SEQUENCE {
///   version                   Version,
///   privateKeyAlgorithm       PrivateKeyAlgorithmIdentifier,
///   privateKey                PrivateKey,
///   attributes            [0] Attributes OPTIONAL,
///   ...,
///   [[2: publicKey        [1] PublicKey OPTIONAL ]],
///   ...
/// }
///
/// Version ::= INTEGER { v1(0), v2(1) } (v1, ..., v2)
///
/// PrivateKeyAlgorithmIdentifier ::= AlgorithmIdentifier
///                                    { PUBLIC-KEY,
///                                      { PrivateKeyAlgorithms } }
///
/// PrivateKey ::= OCTET STRING
///                    -- Content varies based on type of key.  The
///                    -- algorithm identifier dictates the format of
///                    -- the key.
///
/// PublicKey ::= BIT STRING
///                    -- Content varies based on type of key.  The
///                    -- algorithm identifier dictates the format of
///                    -- the key.
///
/// Attributes ::= SET OF Attribute { { OneAsymmetricKeyAttributes } }
pub const OneAsymmetricKey = struct {
    version: u8,
    privateKeyAlgorithmIdentifier: AlgorithmIdentifier,
    privateKey: []u8 = &([_]u8{}),
    publicKey: []u8 = &([_]u8{}),
    attributes: []u8 = &([_]u8{}),

    allocator: std.mem.Allocator,

    const Self = @This();
    const BEGIN_PRIVATE_KEY = "-----BEGIN PRIVATE KEY-----\n";
    const END_PRIVATE_KEY = "-----END PRIVATE KEY-----";
    const OID_ecPublicKey = "1.2.840.10045.2.1";
    const OID_rsaEncryption = "1.2.840.113549.1.1.1";

    pub fn deinit(self: Self) void {
        self.privateKeyAlgorithmIdentifier.deinit();
        if (self.privateKey.len != 0) {
            self.allocator.free(self.privateKey);
        }

        if (self.publicKey.len != 0) {
            self.allocator.free(self.publicKey);
        }

        if (self.attributes.len != 0) {
            self.allocator.free(self.attributes);
        }
    }

    pub fn decode(reader: anytype, allocator: std.mem.Allocator) !Self {
        return try asn1.Decoder.decodeSEQUENCE(reader, allocator, Self);
    }

    pub fn decodeContent(stream: *asn1.Stream, allocator: std.mem.Allocator) !Self {
        var reader = stream.reader();
        var t = @intToEnum(asn1.Tag, try reader.readByte());
        if (t != .INTEGER) {
            return cert.DecodingError.InvalidType;
        }
        const v_len = try asn1.Decoder.decodeLength(reader);
        if (v_len != 1) {
            return cert.DecodingError.InvalidLength;
        }
        const version = try reader.readByte();

        const algorithm = try AlgorithmIdentifier.decode(reader, allocator);
        errdefer algorithm.deinit();

        const pkey = try asn1.Decoder.decodeOCTETSTRING(reader, allocator);
        errdefer allocator.free(pkey);

        var res = Self{
            .version = version,
            .privateKeyAlgorithmIdentifier = algorithm,
            .privateKey = pkey,
            .allocator = allocator,
        };

        // If no undecoded contents are left, return the decoded key.
        if ((try stream.getPos()) == (try stream.getEndPos())) {
            return res;
        }

        // TODO: Implement OPTIONAL
        return cert.DecodingError.InvalidFormat;
    }

    pub fn decodePrivateKey(self: Self) !cert.PrivateKey {
        var stream = io.fixedBufferStream(self.privateKey);
        const id = self.privateKeyAlgorithmIdentifier.algorithm.id;
        if (std.mem.eql(u8, id, OID_ecPublicKey)) {
            return .{ .ec = try cert.ECPrivateKey.decode(stream.reader(), self.allocator) };
        } else if (std.mem.eql(u8, id, OID_rsaEncryption)) {
            return .{ .rsa = try cert.RSAPrivateKey.decode(stream.reader(), self.allocator) };
        }

        return cert.DecodingError.UnsupportedFormat;
    }

    pub fn decodeFromPEM(pem: []const u8, allocator: std.mem.Allocator) !Self {
        const keys = try cert.convertPEMsToDERs(pem, "PRIVATE KEY", allocator);
        defer {
            for (keys.items) |k| {
                allocator.free(k);
            }
            keys.deinit();
        }
        if (keys.items.len != 1) {
            return cert.DecodingError.InvalidFormat;
        }

        var stream_decode = io.fixedBufferStream(keys.items[0]);
        const k = try Self.decode(stream_decode.reader(), allocator);

        return k;
    }
};

// AlgorithmIdentifier  ::=  SEQUENCE  {
//      algorithm               OBJECT IDENTIFIER,
//      parameters              ANY DEFINED BY algorithm OPTIONAL  }
pub const AlgorithmIdentifier = struct {
    algorithm: asn1.ObjectIdentifier,
    parameters: []u8 = &([_]u8{}),

    allocator: std.mem.Allocator,

    const Self = @This();

    pub fn deinit(self: Self) void {
        self.algorithm.deinit();
        if (self.parameters.len != 0) {
            self.allocator.free(self.parameters);
        }
    }

    pub fn decode(reader: anytype, allocator: std.mem.Allocator) !Self {
        return try asn1.Decoder.decodeSEQUENCE(reader, allocator, Self);
    }

    pub fn decodeContent(stream: *asn1.Stream, allocator: std.mem.Allocator) !Self {
        const reader = stream.reader();

        const algorithm = try asn1.ObjectIdentifier.decode(reader, allocator);
        errdefer algorithm.deinit();

        // some algorithm do not have parameters
        if ((try stream.getPos()) == (try stream.getEndPos())) {
            return Self{
                .algorithm = algorithm,
                .allocator = allocator,
            };
        }

        const rest_len = (try stream.getEndPos()) - (try stream.getPos());
        var parameters = try allocator.alloc(u8, rest_len);
        errdefer allocator.free(parameters);

        try reader.readNoEof(parameters);

        return Self{
            .algorithm = algorithm,
            .parameters = parameters,
            .allocator = allocator,
        };
    }
};

test "decode PEM secp256r1 private key" {
    const key_pem =
        \\-----BEGIN PRIVATE KEY-----
        \\MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQg3AIi+kwHGOTYJ2yN
        \\005ZNXzUkCp9nssZmGEV2BHKBQKhRANCAARJzBmXrr13lWpsI0OZ5+hMsNQAFq87
        \\zgoqR0mXMK9EPqNG2dOdhZd5lhzi60m7Y6+DWRPaIT2BtwIau+0iAzl6
        \\-----END PRIVATE KEY-----
    ;

    // zig fmt: off
    const privkey_ans = [_]u8{
    0xdc, 0x02, 0x22, 0xfa, 0x4c, 0x07, 0x18, 0xe4, 0xd8, 0x27, 0x6c, 0x8d, 0xd3,
    0x4e, 0x59, 0x35, 0x7c, 0xd4, 0x90, 0x2a, 0x7d, 0x9e, 0xcb, 0x19, 0x98, 0x61,
    0x15, 0xd8, 0x11, 0xca, 0x05, 0x02
    };
    // zig fmt: on

    const k = try OneAsymmetricKey.decodeFromPEM(key_pem, std.testing.allocator);
    defer k.deinit();

    const pk = (try k.decodePrivateKey()).ec;
    defer pk.deinit();
    try expect(std.mem.eql(u8, pk.privateKey, &privkey_ans));
}

test "decode PEM RSA-2048 private key" {
    const key_pem =
        \\-----BEGIN PRIVATE KEY-----
        \\MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDLgE54uHXeJtbD
        \\OZjLaJOdyrGbPd+ou2/1nkYAQlP5GWe47CUoq1Oo/mjl8P9jlxMDXBztjj/uAB5W
        \\qe1dz+LgHOsvNdx7RSzWysoxeeKY/J5IXBEE80aF3u0PjIaZ+xe3pgksFilF7pcv
        \\WAao7dGYEcC1or+NTf1z5TxVcHB0H5eZ7WETDKB8OkCDBh/3bKi6VCEs7roSYP/H
        \\BGj8lqYGdDGb9b68G3H7S8iEzgzTZyFQ6b1s1oZL8xlmxt+ZqcyJySefnuvrwEIf
        \\/W9WKcmfPiYTQx44UazxHSaAndrljeJYEe66G0w030Hh/w6vGqoMpoGNQt4fjAWC
        \\VtfRaLp7AgMBAAECggEAT8yBeP9EYRez0ZwtWV4pvI92M90AbmcJ0TP+WS2pRh37
        \\OV2IeLkuNi+FLN3jF8dvEjs1sMW+NfLf8rXxuX7ChYVxh/LEAaavnY6p2Nrly34M
        \\B23q0pkfB3HSXe2J/qmitEYshJgwGRclO9B11BplvQ8BFXi7SorRn3e9v/c2caIa
        \\oWmyfO/nV2Cc7yRfD/IpunhRs09l0rqiaMGIg03TC//qUZslN7Pg0n2tiCWs5Qi+
        \\SaCRy4FFy7O7CZv35OwACMN348GsdGZXWOog76Ci3I7pfEaV9wTuooeqZDGtthYh
        \\iIcQAuoIqej28DZLO4/Rh6RmPoZ+v1+f2KOCYwKZqQKBgQDaoOBezHtglTxs14dK
        \\HTyRFSJ00FI7aNIjJFcaqJ+Z+7YVqR651dMKlgg/lrQl5myIRg54frWdtSJ6Zf2G
        \\I+Bc+Ji8sbeYSMRJ4KdUztonQprnUKM8M/DV2/aTvScMbQ1yPf4TUD8+rlDvqmi+
        \\bMqGbpbD5JQNpVOfkJ82NDLoJQKBgQDuSXdwNEYyc5aXyz1YuRf1fbTN8hKEW+nr
        \\GHti5mpRWICVe77vHYSs8WMNglX6s75tYzTPC5qYT1Dv/xfPnUFaPfIujPFlSaRN
        \\IGlC0z3gxMHdxgAysGdwJ/Hq7xg7s12bPQvfYN+2gLE81opGjti4U+YkkloRwZxK
        \\K0LfYUrGHwKBgDvjFZLiMGmkd4jZARYsLAsR3v5gkiXz8JvvuGx1BEMJ0DbevKvr
        \\BoQ/1MKWZYJ8O/6YMh6PlvA8TdV5WpkD+tF8x1no1IHCbQJPp4Zzow5eEFCMpio3
        \\kCEEv+Z4Sdn9hVFl6dMgiDKDTWhZJZgD9PYeFO5UDrouL1nmI7aVVdyBAoGAQ/7I
        \\y0bPZSQgq83+AmxGzvGA/2d9KzHDLSe+Rbl0SyQTBRTbpgXpTyROXJN9j11tEG/H
        \\qPEpux6e/Ozw0XiRJnwYuHnVhE6gSLXf84at2I6st2kBs3Us/w8W9DAn3RlQs7SW
        \\x7YwADb23GJn8LxgUTD3siXk974kp/FyUqXDnYcCgYBMBvqOZB03ThG8UjG/db4v
        \\eAHrhSI+MY42D+CGHYs9zvioIh1kWQFqiMnfAZ2zUQcBuZGrR0+MRG2pVvBP7T/y
        \\UGquvzkyLjyTyiQZaP7Dz/eKFOJrHOHyij41RQ81xu+gGxu9AfjpqnkkuwMGJJJN
        \\c2MI0fi21HESjJ+S1/0ysQ==
        \\-----END PRIVATE KEY-----
    ;

    // zig fmt: off
    const modulus_ans = [_]u8{
    0x00, 0xcb, 0x80, 0x4e, 0x78, 0xb8, 0x75, 0xde, 0x26, 0xd6, 0xc3, 0x39, 0x98,
    0xcb, 0x68, 0x93, 0x9d, 0xca, 0xb1, 0x9b, 0x3d, 0xdf, 0xa8, 0xbb, 0x6f, 0xf5,
    0x9e, 0x46, 0x00, 0x42, 0x53, 0xf9, 0x19, 0x67, 0xb8, 0xec, 0x25, 0x28, 0xab,
    0x53, 0xa8, 0xfe, 0x68, 0xe5, 0xf0, 0xff, 0x63, 0x97, 0x13, 0x03, 0x5c, 0x1c,
    0xed, 0x8e, 0x3f, 0xee, 0x00, 0x1e, 0x56, 0xa9, 0xed, 0x5d, 0xcf, 0xe2, 0xe0,
    0x1c, 0xeb, 0x2f, 0x35, 0xdc, 0x7b, 0x45, 0x2c, 0xd6, 0xca, 0xca, 0x31, 0x79,
    0xe2, 0x98, 0xfc, 0x9e, 0x48, 0x5c, 0x11, 0x04, 0xf3, 0x46, 0x85, 0xde, 0xed,
    0x0f, 0x8c, 0x86, 0x99, 0xfb, 0x17, 0xb7, 0xa6, 0x09, 0x2c, 0x16, 0x29, 0x45,
    0xee, 0x97, 0x2f, 0x58, 0x06, 0xa8, 0xed, 0xd1, 0x98, 0x11, 0xc0, 0xb5, 0xa2,
    0xbf, 0x8d, 0x4d, 0xfd, 0x73, 0xe5, 0x3c, 0x55, 0x70, 0x70, 0x74, 0x1f, 0x97,
    0x99, 0xed, 0x61, 0x13, 0x0c, 0xa0, 0x7c, 0x3a, 0x40, 0x83, 0x06, 0x1f, 0xf7,
    0x6c, 0xa8, 0xba, 0x54, 0x21, 0x2c, 0xee, 0xba, 0x12, 0x60, 0xff, 0xc7, 0x04,
    0x68, 0xfc, 0x96, 0xa6, 0x06, 0x74, 0x31, 0x9b, 0xf5, 0xbe, 0xbc, 0x1b, 0x71,
    0xfb, 0x4b, 0xc8, 0x84, 0xce, 0x0c, 0xd3, 0x67, 0x21, 0x50, 0xe9, 0xbd, 0x6c,
    0xd6, 0x86, 0x4b, 0xf3, 0x19, 0x66, 0xc6, 0xdf, 0x99, 0xa9, 0xcc, 0x89, 0xc9,
    0x27, 0x9f, 0x9e, 0xeb, 0xeb, 0xc0, 0x42, 0x1f, 0xfd, 0x6f, 0x56, 0x29, 0xc9,
    0x9f, 0x3e, 0x26, 0x13, 0x43, 0x1e, 0x38, 0x51, 0xac, 0xf1, 0x1d, 0x26, 0x80,
    0x9d, 0xda, 0xe5, 0x8d, 0xe2, 0x58, 0x11, 0xee, 0xba, 0x1b, 0x4c, 0x34, 0xdf,
    0x41, 0xe1, 0xff, 0x0e, 0xaf, 0x1a, 0xaa, 0x0c, 0xa6, 0x81, 0x8d, 0x42, 0xde,
    0x1f, 0x8c, 0x05, 0x82, 0x56, 0xd7, 0xd1, 0x68, 0xba, 0x7b
    };
    const public_ans = [_]u8{0x01, 0x00, 0x01};
    const private_ans = [_]u8{
    0x4f, 0xcc, 0x81, 0x78, 0xff, 0x44, 0x61, 0x17, 0xb3, 0xd1, 0x9c, 0x2d, 0x59,
    0x5e, 0x29, 0xbc, 0x8f, 0x76, 0x33, 0xdd, 0x00, 0x6e, 0x67, 0x09, 0xd1, 0x33,
    0xfe, 0x59, 0x2d, 0xa9, 0x46, 0x1d, 0xfb, 0x39, 0x5d, 0x88, 0x78, 0xb9, 0x2e,
    0x36, 0x2f, 0x85, 0x2c, 0xdd, 0xe3, 0x17, 0xc7, 0x6f, 0x12, 0x3b, 0x35, 0xb0,
    0xc5, 0xbe, 0x35, 0xf2, 0xdf, 0xf2, 0xb5, 0xf1, 0xb9, 0x7e, 0xc2, 0x85, 0x85,
    0x71, 0x87, 0xf2, 0xc4, 0x01, 0xa6, 0xaf, 0x9d, 0x8e, 0xa9, 0xd8, 0xda, 0xe5,
    0xcb, 0x7e, 0x0c, 0x07, 0x6d, 0xea, 0xd2, 0x99, 0x1f, 0x07, 0x71, 0xd2, 0x5d,
    0xed, 0x89, 0xfe, 0xa9, 0xa2, 0xb4, 0x46, 0x2c, 0x84, 0x98, 0x30, 0x19, 0x17,
    0x25, 0x3b, 0xd0, 0x75, 0xd4, 0x1a, 0x65, 0xbd, 0x0f, 0x01, 0x15, 0x78, 0xbb,
    0x4a, 0x8a, 0xd1, 0x9f, 0x77, 0xbd, 0xbf, 0xf7, 0x36, 0x71, 0xa2, 0x1a, 0xa1,
    0x69, 0xb2, 0x7c, 0xef, 0xe7, 0x57, 0x60, 0x9c, 0xef, 0x24, 0x5f, 0x0f, 0xf2,
    0x29, 0xba, 0x78, 0x51, 0xb3, 0x4f, 0x65, 0xd2, 0xba, 0xa2, 0x68, 0xc1, 0x88,
    0x83, 0x4d, 0xd3, 0x0b, 0xff, 0xea, 0x51, 0x9b, 0x25, 0x37, 0xb3, 0xe0, 0xd2,
    0x7d, 0xad, 0x88, 0x25, 0xac, 0xe5, 0x08, 0xbe, 0x49, 0xa0, 0x91, 0xcb, 0x81,
    0x45, 0xcb, 0xb3, 0xbb, 0x09, 0x9b, 0xf7, 0xe4, 0xec, 0x00, 0x08, 0xc3, 0x77,
    0xe3, 0xc1, 0xac, 0x74, 0x66, 0x57, 0x58, 0xea, 0x20, 0xef, 0xa0, 0xa2, 0xdc,
    0x8e, 0xe9, 0x7c, 0x46, 0x95, 0xf7, 0x04, 0xee, 0xa2, 0x87, 0xaa, 0x64, 0x31,
    0xad, 0xb6, 0x16, 0x21, 0x88, 0x87, 0x10, 0x02, 0xea, 0x08, 0xa9, 0xe8, 0xf6,
    0xf0, 0x36, 0x4b, 0x3b, 0x8f, 0xd1, 0x87, 0xa4, 0x66, 0x3e, 0x86, 0x7e, 0xbf,
    0x5f, 0x9f, 0xd8, 0xa3, 0x82, 0x63, 0x02, 0x99, 0xa9
    };
    const prime1_ans = [_]u8{
    0x00, 0xda, 0xa0, 0xe0, 0x5e, 0xcc, 0x7b, 0x60, 0x95, 0x3c, 0x6c, 0xd7, 0x87,
    0x4a, 0x1d, 0x3c, 0x91, 0x15, 0x22, 0x74, 0xd0, 0x52, 0x3b, 0x68, 0xd2, 0x23,
    0x24, 0x57, 0x1a, 0xa8, 0x9f, 0x99, 0xfb, 0xb6, 0x15, 0xa9, 0x1e, 0xb9, 0xd5,
    0xd3, 0x0a, 0x96, 0x08, 0x3f, 0x96, 0xb4, 0x25, 0xe6, 0x6c, 0x88, 0x46, 0x0e,
    0x78, 0x7e, 0xb5, 0x9d, 0xb5, 0x22, 0x7a, 0x65, 0xfd, 0x86, 0x23, 0xe0, 0x5c,
    0xf8, 0x98, 0xbc, 0xb1, 0xb7, 0x98, 0x48, 0xc4, 0x49, 0xe0, 0xa7, 0x54, 0xce,
    0xda, 0x27, 0x42, 0x9a, 0xe7, 0x50, 0xa3, 0x3c, 0x33, 0xf0, 0xd5, 0xdb, 0xf6,
    0x93, 0xbd, 0x27, 0x0c, 0x6d, 0x0d, 0x72, 0x3d, 0xfe, 0x13, 0x50, 0x3f, 0x3e,
    0xae, 0x50, 0xef, 0xaa, 0x68, 0xbe, 0x6c, 0xca, 0x86, 0x6e, 0x96, 0xc3, 0xe4,
    0x94, 0x0d, 0xa5, 0x53, 0x9f, 0x90, 0x9f, 0x36, 0x34, 0x32, 0xe8, 0x25
    };
    const prime2_ans = [_]u8{
    0x00, 0xee, 0x49, 0x77, 0x70, 0x34, 0x46, 0x32, 0x73, 0x96, 0x97, 0xcb, 0x3d,
    0x58, 0xb9, 0x17, 0xf5, 0x7d, 0xb4, 0xcd, 0xf2, 0x12, 0x84, 0x5b, 0xe9, 0xeb,
    0x18, 0x7b, 0x62, 0xe6, 0x6a, 0x51, 0x58, 0x80, 0x95, 0x7b, 0xbe, 0xef, 0x1d,
    0x84, 0xac, 0xf1, 0x63, 0x0d, 0x82, 0x55, 0xfa, 0xb3, 0xbe, 0x6d, 0x63, 0x34,
    0xcf, 0x0b, 0x9a, 0x98, 0x4f, 0x50, 0xef, 0xff, 0x17, 0xcf, 0x9d, 0x41, 0x5a,
    0x3d, 0xf2, 0x2e, 0x8c, 0xf1, 0x65, 0x49, 0xa4, 0x4d, 0x20, 0x69, 0x42, 0xd3,
    0x3d, 0xe0, 0xc4, 0xc1, 0xdd, 0xc6, 0x00, 0x32, 0xb0, 0x67, 0x70, 0x27, 0xf1,
    0xea, 0xef, 0x18, 0x3b, 0xb3, 0x5d, 0x9b, 0x3d, 0x0b, 0xdf, 0x60, 0xdf, 0xb6,
    0x80, 0xb1, 0x3c, 0xd6, 0x8a, 0x46, 0x8e, 0xd8, 0xb8, 0x53, 0xe6, 0x24, 0x92,
    0x5a, 0x11, 0xc1, 0x9c, 0x4a, 0x2b, 0x42, 0xdf, 0x61, 0x4a, 0xc6, 0x1f
    };
    const exp1_ans = [_]u8{
    0x3b, 0xe3, 0x15, 0x92, 0xe2, 0x30, 0x69, 0xa4, 0x77, 0x88, 0xd9, 0x01, 0x16,
    0x2c, 0x2c, 0x0b, 0x11, 0xde, 0xfe, 0x60, 0x92, 0x25, 0xf3, 0xf0, 0x9b, 0xef,
    0xb8, 0x6c, 0x75, 0x04, 0x43, 0x09, 0xd0, 0x36, 0xde, 0xbc, 0xab, 0xeb, 0x06,
    0x84, 0x3f, 0xd4, 0xc2, 0x96, 0x65, 0x82, 0x7c, 0x3b, 0xfe, 0x98, 0x32, 0x1e,
    0x8f, 0x96, 0xf0, 0x3c, 0x4d, 0xd5, 0x79, 0x5a, 0x99, 0x03, 0xfa, 0xd1, 0x7c,
    0xc7, 0x59, 0xe8, 0xd4, 0x81, 0xc2, 0x6d, 0x02, 0x4f, 0xa7, 0x86, 0x73, 0xa3,
    0x0e, 0x5e, 0x10, 0x50, 0x8c, 0xa6, 0x2a, 0x37, 0x90, 0x21, 0x04, 0xbf, 0xe6,
    0x78, 0x49, 0xd9, 0xfd, 0x85, 0x51, 0x65, 0xe9, 0xd3, 0x20, 0x88, 0x32, 0x83,
    0x4d, 0x68, 0x59, 0x25, 0x98, 0x03, 0xf4, 0xf6, 0x1e, 0x14, 0xee, 0x54, 0x0e,
    0xba, 0x2e, 0x2f, 0x59, 0xe6, 0x23, 0xb6, 0x95, 0x55, 0xdc, 0x81
    };
    const exp2_ans = [_]u8{
    0x43, 0xfe, 0xc8, 0xcb, 0x46, 0xcf, 0x65, 0x24, 0x20, 0xab, 0xcd, 0xfe, 0x02,
    0x6c, 0x46, 0xce, 0xf1, 0x80, 0xff, 0x67, 0x7d, 0x2b, 0x31, 0xc3, 0x2d, 0x27,
    0xbe, 0x45, 0xb9, 0x74, 0x4b, 0x24, 0x13, 0x05, 0x14, 0xdb, 0xa6, 0x05, 0xe9,
    0x4f, 0x24, 0x4e, 0x5c, 0x93, 0x7d, 0x8f, 0x5d, 0x6d, 0x10, 0x6f, 0xc7, 0xa8,
    0xf1, 0x29, 0xbb, 0x1e, 0x9e, 0xfc, 0xec, 0xf0, 0xd1, 0x78, 0x91, 0x26, 0x7c,
    0x18, 0xb8, 0x79, 0xd5, 0x84, 0x4e, 0xa0, 0x48, 0xb5, 0xdf, 0xf3, 0x86, 0xad,
    0xd8, 0x8e, 0xac, 0xb7, 0x69, 0x01, 0xb3, 0x75, 0x2c, 0xff, 0x0f, 0x16, 0xf4,
    0x30, 0x27, 0xdd, 0x19, 0x50, 0xb3, 0xb4, 0x96, 0xc7, 0xb6, 0x30, 0x00, 0x36,
    0xf6, 0xdc, 0x62, 0x67, 0xf0, 0xbc, 0x60, 0x51, 0x30, 0xf7, 0xb2, 0x25, 0xe4,
    0xf7, 0xbe, 0x24, 0xa7, 0xf1, 0x72, 0x52, 0xa5, 0xc3, 0x9d, 0x87
    };
    const coefficient_ans = [_]u8{
    0x4c, 0x06, 0xfa, 0x8e, 0x64, 0x1d, 0x37, 0x4e, 0x11, 0xbc, 0x52, 0x31, 0xbf,
    0x75, 0xbe, 0x2f, 0x78, 0x01, 0xeb, 0x85, 0x22, 0x3e, 0x31, 0x8e, 0x36, 0x0f,
    0xe0, 0x86, 0x1d, 0x8b, 0x3d, 0xce, 0xf8, 0xa8, 0x22, 0x1d, 0x64, 0x59, 0x01,
    0x6a, 0x88, 0xc9, 0xdf, 0x01, 0x9d, 0xb3, 0x51, 0x07, 0x01, 0xb9, 0x91, 0xab,
    0x47, 0x4f, 0x8c, 0x44, 0x6d, 0xa9, 0x56, 0xf0, 0x4f, 0xed, 0x3f, 0xf2, 0x50,
    0x6a, 0xae, 0xbf, 0x39, 0x32, 0x2e, 0x3c, 0x93, 0xca, 0x24, 0x19, 0x68, 0xfe,
    0xc3, 0xcf, 0xf7, 0x8a, 0x14, 0xe2, 0x6b, 0x1c, 0xe1, 0xf2, 0x8a, 0x3e, 0x35,
    0x45, 0x0f, 0x35, 0xc6, 0xef, 0xa0, 0x1b, 0x1b, 0xbd, 0x01, 0xf8, 0xe9, 0xaa,
    0x79, 0x24, 0xbb, 0x03, 0x06, 0x24, 0x92, 0x4d, 0x73, 0x63, 0x08, 0xd1, 0xf8,
    0xb6, 0xd4, 0x71, 0x12, 0x8c, 0x9f, 0x92, 0xd7, 0xfd, 0x32, 0xb1
    };
    // zig fmt: on

    const k = try OneAsymmetricKey.decodeFromPEM(key_pem, std.testing.allocator);
    defer k.deinit();

    const pk = (try cert.decodePrivateKey()).rsa;
    defer pk.deinit();

    try expect(std.mem.eql(u8, pk.modulus, &modulus_ans));
    try expect(std.mem.eql(u8, pk.publicExponent, &public_ans));
    try expect(std.mem.eql(u8, pk.privateExponent, &private_ans));
    try expect(std.mem.eql(u8, pk.prime1, &prime1_ans));
    try expect(std.mem.eql(u8, pk.prime2, &prime2_ans));
    try expect(std.mem.eql(u8, pk.exponent1, &exp1_ans));
    try expect(std.mem.eql(u8, pk.exponent2, &exp2_ans));
    try expect(std.mem.eql(u8, pk.coefficient, &coefficient_ans));
}
